public class Node {
    private int data;
    private Node next;

    public Node(int data) {
        this.data = data;
    }

    public int getData() {
        return data;
    }

    public void setData(int data) {
        this.data = data;
    }

    public Node getNext() {
        return next;
    }

    public void setNext(Node next) {
        this.next = next;
    }
}

public class MyLinkedList {
    private Node head;

    public void pushToHead(int data) {
        Node newNode = new Node(data);
        if(head == null) {
            head = newNode;
            return;
        }
        newNode.setNext(head);
        head = newNode;
    }

    public void pushToTail(int data) {
        Node newNode = new Node(data);
        if(head == null) {
            head = newNode;
            return;
        }

        Node last = head;
        while (last.getNext()!=null) {
            last = last.getNext();
        }
        last.setNext(newNode);
    }

    public boolean pushToIndex(int index, int data) {
        Node newNode = new Node(data);
        if(index<0 || index > (size()-1)) {
            System.out.println("Index не валиден");
            return false;
        }
        if(index==0) {
            newNode.setNext(head);
            head = newNode;
            return true;
        }
        Node current = head;
        int currentIndex = 0;
        while (currentIndex < index-1 ) {
            current = current.getNext();
            currentIndex++;
        }
        newNode.setNext(current.getNext());
        current.setNext(newNode);
        return true;
    }
    public boolean removeFirst() {
        if(head == null) {
            System.out.println("List пустой");
            return false;
        }

        Node current = head;
        if(current.getNext()!=null) {
            head = current.getNext();
        }
        else {
            head = null;
        }
        return true;

    }

    public boolean remove(int index) {
        if(index<0 || index > (size()-1)) {
            System.out.println("Index не валиден");
            return false;
        }
        Node current = head;
        int currentIndex = 0;
        while (currentIndex < index-1 ) {
            current = current.getNext();
            currentIndex++;
        }
        current.setNext(current.getNext().getNext());
        return true;
    }

    //На дом.задание
    public boolean removeLast() {
        return false;
    }

    public int get(int index) {
        return 0;
    }

    public boolean contains(int data) {
        return false;
    }
    // -- На дом.задание


    public int size() {
        if(head == null) return 0;
        Node current = head;
        int size = 1;
        while (current.getNext()!=null) {
            current = current.getNext();
            size++;
        }
        return size;
    }

    void print() {
        Node current = head;
        while (current!=null) {
            System.out.print(current.getData()+" ");
            current = current.getNext();
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        MyLinkedList list = new MyLinkedList();
        list.pushToHead(10);
        list.pushToHead(15);
        list.pushToHead(20);
        list.pushToTail(25);
        System.out.println("Size = "+list.size());
        list.pushToIndex(2, 11);
        list.print();

        list.removeFirst();
        list.print();

        list.remove(2);
        list.print();
    }
}

/*
Домашнее задание: 
Реализовать методы:
    public boolean removeLast() {
    public int get(int index) {
    public boolean contains(int data)
	*/
